[
  {
    "id": 1,
    "title": "Find Maximum in Array",
    "topic": "arrays",
    "difficulty": "easy",
    "description": "Given an array of integers, find the maximum value.",
    "solution": "public int findMax(int[] arr) {\n    int max = arr[0];\n    for(int i : arr) {\n        if(i > max) max = i;\n    }\n    return max;\n}",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)"
  },
  {
    "id": 2,
    "title": "Check Palindrome String",
    "topic": "strings",
    "difficulty": "easy",
    "description": "Check if a given string is a palindrome.",
    "solution": "public boolean isPalindrome(String s) {\n    int i = 0, j = s.length() - 1;\n    while(i < j) {\n        if(s.charAt(i++) != s.charAt(j--)) return false;\n    }\n    return true;\n}",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)"
  },
  {
  "id": 3,
  "title": "Reverse a Linked List",
  "topic": "linkedlist",
  "difficulty": "medium",
  "description": "Reverse a singly linked list in-place.",
  "solution": "public ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        head = next;\n    }\n    return prev;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 4,
  "title": "Two Sum",
  "topic": "arrays",
  "difficulty": "easy",
  "description": "Return indices of the two numbers such that they add up to a specific target.",
  "solution": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 5,
  "title": "Valid Parentheses",
  "topic": "stack",
  "difficulty": "easy",
  "description": "Check if the input string has valid opening and closing parentheses.",
  "solution": "public boolean isValid(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (c == '(') stack.push(')');\n        else if (c == '[') stack.push(']');\n        else if (c == '{') stack.push('}');\n        else if (stack.isEmpty() || stack.pop() != c) return false;\n    }\n    return stack.isEmpty();\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 6,
  "title": "Binary Tree Inorder Traversal",
  "topic": "trees",
  "difficulty": "easy",
  "description": "Return the inorder traversal of a binary tree's nodes' values.",
  "solution": "public List<Integer> inorderTraversal(TreeNode root) {\n    List<Integer> res = new ArrayList<>();\n    Stack<TreeNode> stack = new Stack<>();\n    TreeNode curr = root;\n    while (curr != null || !stack.isEmpty()) {\n        while (curr != null) {\n            stack.push(curr);\n            curr = curr.left;\n        }\n        curr = stack.pop();\n        res.add(curr.val);\n        curr = curr.right;\n    }\n    return res;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 7,
  "title": "Merge Two Sorted Lists",
  "topic": "linkedlist",
  "difficulty": "easy",
  "description": "Merge two sorted linked lists and return it as a new list.",
  "solution": "public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    if (l1 == null) return l2;\n    if (l2 == null) return l1;\n    if (l1.val < l2.val) {\n        l1.next = mergeTwoLists(l1.next, l2);\n        return l1;\n    } else {\n        l2.next = mergeTwoLists(l1, l2.next);\n        return l2;\n    }\n}",
  "timeComplexity": "O(n + m)",
  "spaceComplexity": "O(n + m)"
},
{
  "id": 8,
  "title": "Climbing Stairs",
  "topic": "dynamic programming",
  "difficulty": "easy",
  "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. Count how many distinct ways to climb.",
  "solution": "public int climbStairs(int n) {\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 9,
  "title": "Detect Cycle in Directed Graph",
  "topic": "graphs",
  "difficulty": "medium",
  "description": "Detect if a directed graph contains a cycle.",
  "solution": "public boolean isCyclic(int V, List<List<Integer>> adj) {\n    boolean[] visited = new boolean[V];\n    boolean[] recStack = new boolean[V];\n    for (int i = 0; i < V; i++) {\n        if (dfs(i, visited, recStack, adj)) return true;\n    }\n    return false;\n}\n\nprivate boolean dfs(int node, boolean[] visited, boolean[] recStack, List<List<Integer>> adj) {\n    if (recStack[node]) return true;\n    if (visited[node]) return false;\n    visited[node] = true;\n    recStack[node] = true;\n    for (int neighbor : adj.get(node)) {\n        if (dfs(neighbor, visited, recStack, adj)) return true;\n    }\n    recStack[node] = false;\n    return false;\n}",
  "timeComplexity": "O(V + E)",
  "spaceComplexity": "O(V)"
},
{
  "id": 10,
  "title": "Maximum Subarray Sum (Kadane's Algorithm)",
  "topic": "arrays",
  "difficulty": "medium",
  "description": "Find the contiguous subarray with the maximum sum.",
  "solution": "public int maxSubArray(int[] nums) {\n    int maxSum = nums[0], currSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        currSum = Math.max(nums[i], currSum + nums[i]);\n        maxSum = Math.max(maxSum, currSum);\n    }\n    return maxSum;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 11,
  "title": "Level Order Traversal",
  "topic": "trees",
  "difficulty": "easy",
  "description": "Print the nodes of a binary tree level by level.",
  "solution": "public List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> result = new ArrayList<>();\n    if (root == null) return result;\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        List<Integer> level = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            level.add(node.val);\n            if (node.left != null) queue.offer(node.left);\n            if (node.right != null) queue.offer(node.right);\n        }\n        result.add(level);\n    }\n    return result;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 12,
  "title": "Bubble Sort",
  "topic": "sorting",
  "difficulty": "easy",
  "description": "Sort an array using bubble sort.",
  "solution": "public void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}",
  "timeComplexity": "O(n^2)",
  "spaceComplexity": "O(1)"
},
{
  "id": 13,
  "title": "Anagram Check",
  "topic": "hashing",
  "difficulty": "easy",
  "description": "Check if two strings are anagrams of each other.",
  "solution": "public boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n    int[] count = new int[26];\n    for (char c : s.toCharArray()) count[c - 'a']++;\n    for (char c : t.toCharArray()) count[c - 'a']--;\n    for (int val : count) if (val != 0) return false;\n    return true;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 14,
  "title": "Fibonacci (DP)",
  "topic": "dynamic programming",
  "difficulty": "easy",
  "description": "Find nth Fibonacci number using dynamic programming.",
  "solution": "public int fib(int n) {\n    if (n <= 1) return n;\n    int[] dp = new int[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 15,
  "title": "Search in Rotated Array",
  "topic": "binary search",
  "difficulty": "medium",
  "description": "Search for an element in a rotated sorted array.",
  "solution": "public int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[left] <= nums[mid]) {\n            if (nums[left] <= target && target < nums[mid]) right = mid - 1;\n            else left = mid + 1;\n        } else {\n            if (nums[mid] < target && target <= nums[right]) left = mid + 1;\n            else right = mid - 1;\n        }\n    }\n    return -1;\n}",
  "timeComplexity": "O(log n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 16,
  "title": "Longest Common Subsequence",
  "topic": "dynamic programming",
  "difficulty": "medium",
  "description": "Find the longest common subsequence between two strings.",
  "solution": "public int longestCommonSubsequence(String text1, String text2) {\n    int m = text1.length(), n = text2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n}",
  "timeComplexity": "O(m * n)",
  "spaceComplexity": "O(m * n)"
},
{
  "id": 17,
  "title": "Minimum Path Sum in Grid",
  "topic": "dynamic programming",
  "difficulty": "medium",
  "description": "Find a path from top-left to bottom-right of a grid with minimum sum.",
  "solution": "public int minPathSum(int[][] grid) {\n    int m = grid.length, n = grid[0].length;\n    for (int i = 1; i < m; i++) grid[i][0] += grid[i - 1][0];\n    for (int j = 1; j < n; j++) grid[0][j] += grid[0][j - 1];\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);\n        }\n    }\n    return grid[m - 1][n - 1];\n}",
  "timeComplexity": "O(m * n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 18,
  "title": "Valid Sudoku",
  "topic": "matrix",
  "difficulty": "medium",
  "description": "Check if a 9x9 Sudoku board is valid.",
  "solution": "public boolean isValidSudoku(char[][] board) {\n    Set<String> seen = new HashSet<>();\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            char number = board[i][j];\n            if (number != '.') {\n                if (!seen.add(number + \" in row \" + i) ||\n                    !seen.add(number + \" in col \" + j) ||\n                    !seen.add(number + \" in box \" + i / 3 + \"-\" + j / 3))\n                    return false;\n            }\n        }\n    }\n    return true;\n}",
  "timeComplexity": "O(1)",
  "spaceComplexity": "O(1)"
},
{
  "id": 19,
  "title": "Power of Two",
  "topic": "math",
  "difficulty": "easy",
  "description": "Check if a number is a power of two.",
  "solution": "public boolean isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}",
  "timeComplexity": "O(1)",
  "spaceComplexity": "O(1)"
},
{
  "id": 20,
  "title": "Count Bits",
  "topic": "bit manipulation",
  "difficulty": "easy",
  "description": "For every number i from 0 to n, return the number of 1's in its binary representation.",
  "solution": "public int[] countBits(int n) {\n    int[] ans = new int[n + 1];\n   for (int i = 1; i <= n; i++) {\n        ans[i] = ans[i >> 1] + (i & 1);\n    }\n    return ans;\n}",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)"
},
{
  "id": 21,
  "title": "Number of Islands",
  "topic": "graphs",
  "difficulty": "medium",
  "description": "Count the number of islands in a 2D grid using DFS.",
  "solution": "public int numIslands(char[][] grid) {\n    int count = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == '1') {\n                dfs(grid, i, j);\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nprivate void dfs(char[][] grid, int i, int j) {\n    if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') return;\n    grid[i][j] = '0';\n    dfs(grid, i + 1, j);\n    dfs(grid, i - 1, j);\n    dfs(grid, i, j + 1);\n    dfs(grid, i, j - 1);\n}",
  "timeComplexity": "O(m * n)",
  "spaceComplexity": "O(m * n)"
},
{
  "id": 22,
  "title": "Permutations of Array",
  "topic": "recursion",
  "difficulty": "medium",
  "description": "Generate all permutations of a given array.",
  "solution": "public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(result, new ArrayList<>(), nums);\n    return result;\n}\n\nprivate void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums) {\n    if (tempList.size() == nums.length) {\n        result.add(new ArrayList<>(tempList));\n    } else {\n        for (int i = 0; i < nums.length; i++) {\n            if (tempList.contains(nums[i])) continue;\n            tempList.add(nums[i]);\n            backtrack(result, tempList, nums);\n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}",
  "timeComplexity": "O(n!)",
  "spaceComplexity": "O(n)"
},
{
  "id": 23,
  "title": "Longest Substring Without Repeating Characters",
  "topic": "sliding window",
  "difficulty": "medium",
  "description": "Find the length of the longest substring without repeating characters.",
  "solution": "public int lengthOfLongestSubstring(String s) {\n    Set<Character> set = new HashSet<>();\n    int left = 0, max = 0;\n    for (int right = 0; right < s.length(); right++) {\n        while (set.contains(s.charAt(right))) {\n            set.remove(s.charAt(left++));\n        }\n        set.add(s.charAt(right));\n        max = Math.max(max, right - left + 1);\n    }\n    return max;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 24,
  "title": "Jump Game",
  "topic": "greedy",
  "difficulty": "medium",
  "description": "Determine if you can reach the last index in the array.",
  "solution": "public boolean canJump(int[] nums) {\n    int reachable = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (i > reachable) return false;\n        reachable = Math.max(reachable, i + nums[i]);\n    }\n    return true;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 25,
  "title": "Next Greater Element",
  "topic": "stack",
  "difficulty": "medium",
  "description": "Find the next greater element for each element in an array.",
  "solution": "public int[] nextGreaterElements(int[] nums) {\n    int[] result = new int[nums.length];\n    Stack<Integer> stack = new Stack<>();\n    for (int i = nums.length - 1; i >= 0; i--) {\n        while (!stack.isEmpty() && stack.peek() <= nums[i]) {\n            stack.pop();\n        }\n        result[i] = stack.isEmpty() ? -1 : stack.peek();\n        stack.push(nums[i]);\n    }\n    return result;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 26,
  "title": "Spiral Order Matrix",
  "topic": "matrix",
  "difficulty": "medium",
  "description": "Return all elements of a matrix in spiral order.",
  "solution": "public List<Integer> spiralOrder(int[][] matrix) {\n    List<Integer> result = new ArrayList<>();\n    if (matrix.length == 0) return result;\n    int top = 0, bottom = matrix.length - 1, left = 0, right = matrix[0].length - 1;\n    while (top <= bottom && left <= right) {\n        for (int i = left; i <= right; i++) result.add(matrix[top][i]);\n        top++;\n        for (int i = top; i <= bottom; i++) result.add(matrix[i][right]);\n        right--;\n        if (top <= bottom) {\n            for (int i = right; i >= left; i--) result.add(matrix[bottom][i]);\n            bottom--;\n        }\n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) result.add(matrix[i][left]);\n            left++;\n        }\n    }\n    return result;\n}",
  "timeComplexity": "O(m * n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 27,
  "title": "Generate Parentheses",
  "topic": "recursion",
  "difficulty": "medium",
  "description": "Generate all combinations of n pairs of well-formed parentheses.",
  "solution": "public List<String> generateParenthesis(int n) {\n    List<String> result = new ArrayList<>();\n    backtrack(result, \"\", 0, 0, n);\n    return result;\n}\n\nprivate void backtrack(List<String> result, String current, int open, int close, int max) {\n    if (current.length() == max * 2) {\n        result.add(current);\n        return;\n    }\n    if (open < max) backtrack(result, current + \"(\", open + 1, close, max);\n    if (close < open) backtrack(result, current + \")\", open, close + 1, max);\n}",
  "timeComplexity": "O(2^n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 28,
  "title": "Coin Change",
  "topic": "dynamic programming",
  "difficulty": "medium",
  "description": "Given coins of different denominations, find the minimum number of coins to make a certain amount.",
  "solution": "public int coinChange(int[] coins, int amount) {\n    int[] dp = new int[amount + 1];\n    Arrays.fill(dp, amount + 1);\n    dp[0] = 0;\n    for (int coin : coins) {\n        for (int i = coin; i <= amount; i++) {\n            dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n        }\n    }\n    return dp[amount] > amount ? -1 : dp[amount];\n}",
  "timeComplexity": "O(amount * n)",
  "spaceComplexity": "O(amount)"
},
{
  "id": 29,
  "title": "Majority Element",
  "topic": "arrays",
  "difficulty": "easy",
  "description": "Find the element that appears more than n/2 times in the array.",
  "solution": "public int majorityElement(int[] nums) {\n    int count = 0, candidate = 0;\n    for (int num : nums) {\n        if (count == 0) candidate = num;\n        count += (num == candidate) ? 1 : -1;\n    }\n    return candidate;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 30,
  "title": "Subsets (Power Set)",
  "topic": "recursion",
  "difficulty": "medium",
  "description": "Generate all possible subsets of a set.",
  "solution": "public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(result, new ArrayList<>(), nums, 0);\n    return result;\n}\n\nprivate void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums, int start) {\n    result.add(new ArrayList<>(tempList));\n    for (int i = start; i < nums.length; i++) {\n        tempList.add(nums[i]);\n        backtrack(result, tempList, nums, i + 1);\n        tempList.remove(tempList.size() - 1);\n    }\n}",
  "timeComplexity": "O(2^n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 31,
  "title": "Diameter of Binary Tree",
  "topic": "trees",
  "difficulty": "medium",
  "description": "Return the diameter (longest path) of a binary tree.",
  "solution": "int diameter = 0;\npublic int diameterOfBinaryTree(TreeNode root) {\n    depth(root);\n    return diameter;\n}\n\nprivate int depth(TreeNode node) {\n    if (node == null) return 0;\n    int left = depth(node.left);\n    int right = depth(node.right);\n    diameter = Math.max(diameter, left + right);\n    return Math.max(left, right) + 1;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(h)"
},
{
  "id": 32,
  "title": "Gas Station",
  "topic": "greedy",
  "difficulty": "medium",
  "description": "You have two integer arrays gas and cost. Return the starting gas station index to complete the circuit.",
  "solution": "public int canCompleteCircuit(int[] gas, int[] cost) {\n    int total = 0, curr = 0, start = 0;\n    for (int i = 0; i < gas.length; i++) {\n        total += gas[i] - cost[i];\n        curr += gas[i] - cost[i];\n        if (curr < 0) {\n            curr = 0;\n            start = i + 1;\n        }\n    }\n    return total < 0 ? -1 : start;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 33,
  "title": "Longest Repeating Character Replacement",
  "topic": "sliding window",
  "difficulty": "medium",
  "description": "Replace at most k characters to make longest substring with all same letters.",
  "solution": "public int characterReplacement(String s, int k) {\n    int[] count = new int[26];\n    int maxCount = 0, left = 0, maxLength = 0;\n    for (int right = 0; right < s.length(); right++) {\n        maxCount = Math.max(maxCount, ++count[s.charAt(right) - 'A']);\n        while ((right - left + 1) - maxCount > k) {\n            count[s.charAt(left++) - 'A']--;\n        }\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    return maxLength;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 34,
  "title": "House Robber",
  "topic": "dynamic programming",
  "difficulty": "medium",
  "description": "Maximize amount of money robbed from houses with no two adjacent.",
  "solution": "public int rob(int[] nums) {\n    if (nums.length == 0) return 0;\n    if (nums.length == 1) return nums[0];\n    int[] dp = new int[nums.length];\n    dp[0] = nums[0];\n    dp[1] = Math.max(nums[0], nums[1]);\n    for (int i = 2; i < nums.length; i++) {\n        dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);\n    }\n    return dp[nums.length - 1];\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 35,
  "title": "Palindrome Partitioning",
  "topic": "backtracking",
  "difficulty": "medium",
  "description": "Partition a string such that every substring is a palindrome.",
  "solution": "public List<List<String>> partition(String s) {\n    List<List<String>> result = new ArrayList<>();\n    backtrack(result, new ArrayList<>(), s, 0);\n    return result;\n}\n\nprivate void backtrack(List<List<String>> result, List<String> tempList, String s, int start) {\n    if (start == s.length()) {\n        result.add(new ArrayList<>(tempList));\n        return;\n    }\n    for (int end = start + 1; end <= s.length(); end++) {\n        String sub = s.substring(start, end);\n        if (isPalindrome(sub)) {\n            tempList.add(sub);\n            backtrack(result, tempList, s, end);\n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}\n\nprivate boolean isPalindrome(String s) {\n    int l = 0, r = s.length() - 1;\n    while (l < r) {\n        if (s.charAt(l++) != s.charAt(r--)) return false;\n    }\n    return true;\n}",
  "timeComplexity": "O(2^n)",
  "spaceComplexity": "O(n)"
},
{
  "id": 36,
  "title": "Bitwise AND of Numbers Range",
  "topic": "bit manipulation",
  "difficulty": "medium",
  "description": "Find bitwise AND of all numbers between m and n.",
  "solution": "public int rangeBitwiseAnd(int m, int n) {\n    int shift = 0;\n    while (m < n) {\n        m >>= 1;\n        n >>= 1;\n        shift++;\n    }\n    return m << shift;\n}",
  "timeComplexity": "O(1)",
  "spaceComplexity": "O(1)"
},
{
  "id": 37,
  "title": "Find Peak Element",
  "topic": "binary search",
  "difficulty": "medium",
  "description": "Find an element that is greater than its neighbors.",
  "solution": "public int findPeakElement(int[] nums) {\n    int left = 0, right = nums.length - 1;\n    while (left < right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] > nums[mid + 1]) right = mid;\n        else left = mid + 1;\n    }\n    return left;\n}",
  "timeComplexity": "O(log n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 38,
  "title": "Find Missing Number",
  "topic": "math",
  "difficulty": "easy",
  "description": "Find the missing number from an array 0 to n.",
  "solution": "public int missingNumber(int[] nums) {\n    int n = nums.length;\n    int expected = n * (n + 1) / 2;\n    int actual = 0;\n    for (int num : nums) actual += num;\n    return expected - actual;\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)"
},
{
  "id": 39,
  "title": "Detect Cycle in Undirected Graph",
  "topic": "graphs",
  "difficulty": "medium",
  "description": "Detect cycle using DFS in an undirected graph.",
  "solution": "public boolean hasCycle(int V, List<List<Integer>> adj) {\n    boolean[] visited = new boolean[V];\n    for (int i = 0; i < V; i++) {\n        if (!visited[i] && dfs(i, -1, visited, adj)) return true;\n    }\n    return false;\n}\n\nprivate boolean dfs(int node, int parent, boolean[] visited, List<List<Integer>> adj) {\n    visited[node] = true;\n    for (int neighbor : adj.get(node)) {\n        if (!visited[neighbor]) {\n            if (dfs(neighbor, node, visited, adj)) return true;\n        } else if (neighbor != parent) return true;\n    }\n    return false;\n}",
  "timeComplexity": "O(V + E)",
  "spaceComplexity": "O(V)"
},
{
  "id": 40,
  "title": "Set Matrix Zeroes",
  "topic": "matrix",
  "difficulty": "medium",
  "description": "If an element is 0, set entire row and column to 0 in matrix.",
  "solution": "public void setZeroes(int[][] matrix) {\n    boolean firstRow = false, firstCol = false;\n    for (int i = 0; i < matrix.length; i++) if (matrix[i][0] == 0) firstCol = true;\n    for (int j = 0; j < matrix[0].length; j++) if (matrix[0][j] == 0) firstRow = true;\n    for (int i = 1; i < matrix.length; i++) {\n        for (int j = 1; j < matrix[0].length; j++) {\n            if (matrix[i][j] == 0) {\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n    for (int i = 1; i < matrix.length; i++) if (matrix[i][0] == 0)\n        Arrays.fill(matrix[i], 0);\n    for (int j = 1; j < matrix[0].length; j++) if (matrix[0][j] == 0)\n        for (int i = 0; i < matrix.length; i++) matrix[i][j] = 0;\n    if (firstRow) Arrays.fill(matrix[0], 0);\n    if (firstCol) for (int i = 0; i < matrix.length; i++) matrix[i][0] = 0;\n}",
  "timeComplexity": "O(m * n)",
  "spaceComplexity": "O(1)"
}

]


